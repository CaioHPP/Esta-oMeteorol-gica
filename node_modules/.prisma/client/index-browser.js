
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.LeituraScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt'
});

exports.Prisma.TemperaturaScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.PressaoScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.AltitudeScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.VelocidadeVentoScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  media: 'media',
  maximo: 'maximo',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.DirecaoVentoScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.PrecipitacaoScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.UmidadeSoloScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.UmidadeRelativaScalarFieldEnum = makeEnum({
  id: 'id',
  sensor: 'sensor',
  valor: 'valor',
  unidade: 'unidade',
  ordemGrandeza: 'ordemGrandeza',
  leituraId: 'leituraId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Leitura: 'Leitura',
  Temperatura: 'Temperatura',
  Pressao: 'Pressao',
  Altitude: 'Altitude',
  VelocidadeVento: 'VelocidadeVento',
  DirecaoVento: 'DirecaoVento',
  Precipitacao: 'Precipitacao',
  UmidadeSolo: 'UmidadeSolo',
  UmidadeRelativa: 'UmidadeRelativa'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
